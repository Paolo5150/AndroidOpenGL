#version 300 es
precision highp float;

layout(location = 0) in vec3 position;
layout(location = 1) in  vec2 texCoords;
layout(location = 2) in vec3 normal;
layout(location = 3) in vec3 tangent;
layout(location = 4) in vec3 bitangent;

struct DirectionalLight
{
    vec3 direction;
    vec3 specularColor;
    vec3 color;
};

uniform DirectionalLight dirLight;

uniform mat4 mvp;
uniform mat4 model;


out vec2 coords;
out vec3 norms;
out vec3 fragpos;
out vec3 fragposTS;
out vec4 clipSpace;
out DirectionalLight directionalLight;


out vec3 dirLightTS;
out vec3 camPosTS;
out vec3 camPos;

uniform vec3 cameraPosition;


mat3 TBN;
void main()
{

vec3 T = normalize(vec3( model * vec4(normalize(tangent),0.0)));
vec3 B = normalize(vec3( model * vec4(normalize(bitangent),0.0)));
vec3 N = normalize(vec3( model * vec4(normalize(normal),0.0)));
TBN = transpose(mat3(T,B,N));

clipSpace = mvp * vec4(position,1.0);
gl_Position = clipSpace;
fragpos = vec3(model * vec4(position,1.0));
coords = texCoords;
norms =  mat3(transpose(inverse(model))) * normal;

directionalLight = dirLight;
camPos = cameraPosition;
camPosTS = TBN * cameraPosition;
dirLightTS = TBN * dirLight.direction;
fragposTS = TBN * fragpos;

}