#version 300 es
precision highp float;

struct Material
{
    vec3 color;
    vec3 specularColor;
    float shininess;
    vec2 UVOffset;
    float UVScale;
};

struct DirectionalLight
{
    vec3 direction;
    vec3 specularColor;
    vec3 color;
};



out vec4 col;

//From Vertex shader
in vec2 coords;
in vec3 norms;
in vec3 fragpos;
in DirectionalLight directionalLight;
in vec3 camPos;
in vec3 camPosTS;
in vec3 dirLightTS;
in vec3 fragposTS;

uniform vec3 ambientLight;

uniform Material material;

uniform sampler2D texture_diffuse0;

uniform sampler2D texture_normal0;




void main()
{
    float _UVScale = material.UVScale;
    vec2 _UVOffset = material.UVOffset;

    vec3 texColor0 = texture(texture_diffuse0,(coords + _UVOffset) * _UVScale).xyz;

    vec3 normalFromMap = texture(texture_normal0,(coords + _UVOffset) * _UVScale).xyz;


    normalFromMap = normalize(normalFromMap*2.0 -1.0);

    //Diffuse lighting
    vec3 diffuse;
    float d = max(dot(normalize(normalFromMap),-normalize(dirLightTS)),0.0);
    diffuse = directionalLight.color * d;

    //Specular lighting
    vec3 specular;
    vec3 fragToCamTS = normalize(camPosTS - fragposTS);

    vec3 ref = reflect(normalize(dirLightTS), normalize(normalFromMap));
    d = pow(max(dot(normalize(ref), fragToCamTS),0.0f),material.shininess);

    specular = d * material.specularColor ;

    vec3 total = texColor0 * material.color * (ambientLight + diffuse + specular);

    col = vec4(total,1.0);


}